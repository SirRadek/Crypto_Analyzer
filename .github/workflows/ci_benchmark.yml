name: CI Benchmark

on:
  push:
  pull_request:

jobs:
  benchmark:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: pip install -r requirements.txt
      - name: Create synthetic data
        run: |
          python - <<'PY'
import numpy as np, pandas as pd
rng = np.random.default_rng(0)
rows = 20000
cols = {
    "timestamp": pd.date_range("2021-01-01", periods=rows, freq="5min"),
    "open": rng.random(rows),
    "high": rng.random(rows)+1,
    "low": rng.random(rows),
    "close": rng.random(rows)+1,
    "volume": rng.random(rows)+1,
    "quote_asset_volume": rng.random(rows)+1,
    "taker_buy_base": rng.random(rows),
    "taker_buy_quote": rng.random(rows),
    "basis_annualized": rng.random(rows),
    "open_interest": rng.random(rows),
}
for i in range(1,3):
    cols[f"lob_bid_L{i}"] = rng.random(rows)
    cols[f"lob_ask_L{i}"] = rng.random(rows)

df = pd.DataFrame(cols)
df.to_csv('synthetic.csv', index=False)
PY
      - name: Run benchmark
        run: |
          /usr/bin/time -v python -m ml.train_price --horizon-min 120 --features ml/feature_list.json --data synthetic.csv --outdir models/ci 2>&1 | tee time.log
          tail -n 20 time.log
          peak=$(grep -oP 'Maximum resident set size \(kbytes\): \K\d+' time.log)
          if [ "$peak" -gt 16000000 ]; then echo "Memory limit exceeded: $peak"; exit 1; fi
      - uses: actions/upload-artifact@v4
        with:
          name: benchmark-metrics
          path: models/ci/model_meta.json
